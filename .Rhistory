font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="xkcd.ttf", mode="wb")
font_import(paths = "~/.fonts", pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
if ('xkcd' %in% fonts()) {
p <- ggplot() + geom_point(aes(x=mpg, y-wt), data=mtcars) +
theme(text = element_text(size=16, family = "xkcd"))
}else {
+   warning("Not xkcd fonts installed!")
+ p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
if ('xkcd' %in% fonts()) {
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size=16, family = "xkcd"))
}else {
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + + xkcdaxis(xrange,yrange)
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + xkcdaxis(xrange,yrange)
p
fon.paths()
font.paths()
font_import()
warnings()
fonts()
loadfonts()
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + xkcdaxis(xrange,yrange)
p
fonts()
font_import(paths = "~/.fonts", pattern = "[X/x]kcd", prompt=FALSE)
fonts()
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + xkcdaxis(xrange,yrange)
p
font.paths()
font_import(".")
loadfonts()
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + xkcdaxis(xrange,yrange)
p
download.file("http://dl.dropbox.com/u/12305244/Humor-Sans.ttf", dest="~/Library/Fonts/Humor-Sans.ttf", mode="wb")
font.add("Humor Sans", regular = "Humor-Sans.ttf")
font_import(paths = "~/.fonts", pattern = "Humor-Sans", prompt=FALSE)
library(sysfonts)
install.packages("sysfonts")
download.file("http://dl.dropbox.com/u/12305244/Humor-Sans.ttf", dest="~/Library/Fonts/Humor-Sans.ttf", mode="wb")
library(sysfonts)
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="~/Library/Fonts/xkcd.ttf", mode="wb")
download.file("http://dl.dropbox.com/u/12305244/Humor-Sans.ttf", dest="~/Library/Fonts/Humor-Sans.ttf", mode="wb")
font_import(paths = "~/.fonts", pattern = "Humor-Sans", prompt=FALSE)
font_import(paths = "~/.fonts", pattern = "Humor Sans", prompt=FALSE)
?font.add
font.add("Humor Sans", regular = "Humor-Sans.ttf")
loadfonts()
p1 <- ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(shape=20) +                                                  # use solid circles
xkcdaxis(xrange,yrange) +                                           # plot the xkcd-styled axis
xlab("weight in thoushands of pounds") +                # label the x-axis
ylab("miles per gallon")                                                # label the y-axis
print(p1)
fonts()
font.add("Humor Sans", regular = "Humor-Sans.ttf")
p1 <- ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(shape=20) +                                                  # use solid circles
xkcdaxis(xrange,yrange) +                                           # plot the xkcd-styled axis
xlab("weight in thoushands of pounds") +                # label the x-axis
ylab("miles per gallon")                                                # label the y-axis
print(p1)
fonts()
loadfonts()
fonts()
font_import(paths = "~/.fonts", pattern = "Humor-Sans", prompt=FALSE)
font_import(paths = "~/.fonts", pattern = "Humor Sans", prompt=FALSE)
library(ggplot2)
p <- ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(shape=1)                                                 # use hollow circles
print(p)
?download.file
library(xkcd)
xrange <- range(mtcars$wt)
yrange <- range(mtcars$mpg)
p1 <- ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(shape=20) +                                                  # use solid circles
xkcdaxis(xrange,yrange) +                                           # plot the xkcd-styled axis
xlab("weight in thoushands of pounds") +                # label the x-axis
ylab("miles per gallon")                                                # label the y-axis
print(p1)
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
dygraph(lungDeaths) %>% dyRangeSelector()
dygraph(lungDeaths) %>%
dySeries("mdeaths", label = "Male") %>%
dySeries("fdeaths", label = "Female") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 20)
hw <- HoltWinters(ldeaths)
predicted <- predict(hw, n.ahead = 72, prediction.interval = TRUE)
dygraph(predicted, main = "Predicted Lung Deaths (UK)") %>%
dyAxis("x", drawGrid = FALSE) %>%
dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(colors = RColorBrewer::brewer.pal(3, "Set1"))
install.packages("metricsgraphics")
devtools::install_github("hrbrmstr/metricsgraphics")
library(htmltools)
library(htmlwidgets)
library(metricsgraphics)
library(RColorBrewer)
tmp <- data.frame(year=seq(1790, 1970, 10), uspop=as.numeric(uspop))
tmp %>%
mjs_plot(x=year, y=uspop) %>%
mjs_line() %>%
mjs_add_marker(1850, "Something Wonderful") %>%
mjs_add_baseline(150, "Something Awful")
mp %>%
mjs_plot(x=uspop, y=year, width=500, height=400) %>%
mjs_bar() %>%
mjs_axis_x(xax_format = 'plain')
tmp %>%
mjs_plot(x=uspop, y=year, width=500, height=400) %>%
mjs_bar() %>%
mjs_axis_x(xax_format = 'plain')
# basic scatterplot
mtcars %>%
mjs_plot(x=wt, y=mpg, width=600, height=500) %>%
mjs_point(color_accessor=carb, size_accessor=carb) %>%
mjs_labs(x="Weight of Car", y="Miles per Gallon")
set.seed(1492)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
stocks %>%
mjs_plot(x=time, y=X) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
lapply(1:7, function(x) {
mjs_plot(rnorm(10000, mean=x/2, sd=x), width=300, height=300) %>%
mjs_histogram(bar_margin=2) %>%
mjs_labs(x_label=sprintf("Plot %d", x))
}) -> plots
mjs_grid(plots)
plots <- lapply(1:7, function(x) {
mjs_plot(rnorm(10000, mean=x/2, sd=x), width=300, height=300) %>%
mjs_histogram(bar_margin=2) %>%
mjs_labs(x_label=sprintf("Plot %d", x))
})
})
plots <- lapply(1:7, function(x) {
mjs_plot(rnorm(10000, mean=x/2, sd=x), width=300, height=300) %>%
mjs_histogram(bar_margin=2) %>%
mjs_labs(x_label=sprintf("Plot %d", x))
})
lapply(1:7, function(x) {
mjs_plot(rbeta(10000, x, x), width=300, height=300) %>%
mjs_histogram(bar_margin=2) %>%
mjs_labs(x_label=sprintf("Plot %d", x))
}) -> moar_plots
mjs_plot(rnorm(10000, mean=x/2, sd=x), width=300, height=300) %>%
mjs_histogram(bar_margin=2)
mjs_plot(rnorm(10000, mean=1/2, sd=1), width=300, height=300) %>%
mjs_histogram(bar_margin=2)
movies <- movies[sample(nrow(movies), 1000), ]
mjs_plot(movies$rating) %>% mjs_histogram()
mjs_plot(rnorm(1000)) %>% mjs_histogram()
install.packages("shiny")
library(htmltools)
library(htmlwidgets)
library(metricsgraphics)
library(RColorBrewer)
tmp <- data.frame(year=seq(1790, 1970, 10), uspop=as.numeric(uspop))
mjs_plot(rnorm(1000)) %>% mjs_histogram()
mjs_plot(rnorm(10000)) %>%
mjs_histogram(bins=30, bar_margin=1)
session.info()
sessionInfo()
library(metricgraphics)
library(metricsgraphics)
mjs_plot(rnorm(10000)) %>%
mjs_histogram(bins=30, bar_margin=1)
mjs_plot(rnorm(10000)) %>%
mjs_histogram()
stocks2 <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
set.seed(1492)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
stocks2 <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
s1 <- stocks %>%
mjs_plot(x=time, y=X, linked=TRUE, width=350, height=275) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
s2 <- stocks2 %>%
mjs_plot(x=time, y=X, linked=TRUE, width=350, height=275) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
mjs_grid(s1, s2, ncol=2)
library(htmltools)
library(htmlwidgets)
library(metricsgraphics)
library(RColorBrewer)
mjs_grid(s1, s2, ncol=2)
stocks %>%
mjs_plot(x=time, y=X) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
install.packages("networkD3")
library(networkD3)
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
simpleNetwork(networkData)
data(MisLinks)
data(MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
library(RCurl)
URL <- "https://raw.githubusercontent.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- getURL(URL, ssl.verifypeer = FALSE)
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontsize = 12, nodeWidth = 30)
install.packages(c("BH", "manipulate", "markovchain", "rgdal"))
setwd("~/Downloads/prescription/20150408_ea2dc1a6-22d5-4295-9d39-9bf015dc5a89")
doc = xmlTreeParse("e41f44b8-04eb-4676-9ef9-3aaaab20a3d6.xml", useInternal = TRUE)
library(XML)
library(XML)
doc = xmlTreeParse("e41f44b8-04eb-4676-9ef9-3aaaab20a3d6.xml", useInternal = TRUE)
top = xmlRoot(doc)
xmlName(top)
names(top)
names(top[[3]])
drug = top[["title"]]
names(drug)
names(top[[3]])
xmlSApply(drug, xmlValue)
test <- xmlSApply(drug, xmlValue)
test
?class
class(test)
length(test)
test[1]
test[2]
test[3]
test[4]
test[5]
setwd("~/Downloads")
doc = xmlTreeParse("./prescription/20150408_ea2dc1a6-22d5-4295-9d39-9bf015dc5a89/e41f44b8-04eb-4676-9ef9-3aaaab20a3d6.xml", useInternal = TRUE)
top = xmlRoot(doc)
xmlName(top)
names(top)
drug = top[["title"]]
names(drug)
names(top[[3]])
test <- xmlSApply(drug, xmlValue)
library(xml2)
xml_text(drug)
test <- xmlSApply(drug, xmlValue)
test
names(test)
paste(test[names(test != "br")])
test[names(test != "br")]
names(test)
names(test) != "br"
test[names(test) != "br"]
paste(test[names(test) != "br"])
paste(test[names(test) != "br"], collapse=" ")
setwd("~/Downloads/prescription")
currentFolder = list.files()[1]
currentfile = list.files(paste0("./", currentFolder))[1]
str_sub(currentfile, start = 1, end = -5)
library(stringr)
str_sub(currentfile, start = 1, end = -5)
str_sub(currentfile, -4)
paste(".", currentFolder, currentFile, sep = "/")
paste(".", currentFolder, currentfile, sep = "/")
rm(list=ls())
setwd("~/Downloads/prescription")
textFound = c()
for (i in 1:5)) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
for (i in 1:5) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
textInfo = paste(drugInfo[names(drugInfo) != "br"], collapse=" ")
textFound = c(textFound, textInfo)
}
}
textFound
currentFolder = list.files()[1]
currentFile = list.files(paste0("./", currentFolder))[1]
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
textInfo = paste(drugInfo[names(drugInfo) != "br"], collapse=" ")
names(top)
names(top[["title"]])
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c()
for (i in 1:5) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, textInfo)
}
}
textFound
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text
names(text)
text2 = paste(text[names(text) != "br"], collapse=" ")
textFound = c()
for (i in 1:5) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
}
}
textFound
textFound = c()
for (i in length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
}
}
textFound
list.files()
textFound = c()
for (i in length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
}
}
length(textFound)
rm(list=ls())
length(list.files())
for (i in 1:length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
}
}
textFound = c()
for (i in 1:length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
}
}
textFound
textFound = c()
for (i in 1:length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
if (!is.null(drugInfo)) {
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
}
}
}
as.character(44)
textFound = c()
for (i in 1:length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
if (!is.null(drugInfo)) {
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
} else {
textFound = (textFound, paste("NoneFound", as.character(i), sep = "_"))
}
}
}
textFound = c()
for (i in 1:length(list.files())) {
currentFolder = list.files()[i]
currentFile = list.files(paste0("./", currentFolder))[1]
#check to make sure currentFile is an xml file
if (str_sub(currentFile, -4) == ".xml") {
doc = xmlTreeParse(paste(".", currentFolder, currentFile, sep = "/"), useInternal = TRUE)
top = xmlRoot(doc)
drugInfo = top[["title"]]
if (!is.null(drugInfo)) {
text = xmlSApply(drugInfo, xmlValue)
text = paste(text[names(text) != "br"], collapse=" ")
textFound = c(textFound, text)
} else {
textFound = c(textFound, paste("NoneFound", as.character(i), sep = "_"))
}
}
}
textFound
setwd("~/Documents/UpdateDemo")

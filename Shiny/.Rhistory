mjs_plot(rbeta(10000, x, x), width=300, height=300) %>%
mjs_histogram(bar_margin=2) %>%
mjs_labs(x_label=sprintf("Plot %d", x))
}) -> moar_plots
mjs_plot(rnorm(10000, mean=x/2, sd=x), width=300, height=300) %>%
mjs_histogram(bar_margin=2)
mjs_plot(rnorm(10000, mean=1/2, sd=1), width=300, height=300) %>%
mjs_histogram(bar_margin=2)
movies <- movies[sample(nrow(movies), 1000), ]
mjs_plot(movies$rating) %>% mjs_histogram()
mjs_plot(rnorm(1000)) %>% mjs_histogram()
install.packages("shiny")
library(htmltools)
library(htmlwidgets)
library(metricsgraphics)
library(RColorBrewer)
tmp <- data.frame(year=seq(1790, 1970, 10), uspop=as.numeric(uspop))
mjs_plot(rnorm(1000)) %>% mjs_histogram()
mjs_plot(rnorm(10000)) %>%
mjs_histogram(bins=30, bar_margin=1)
session.info()
sessionInfo()
library(metricgraphics)
library(metricsgraphics)
mjs_plot(rnorm(10000)) %>%
mjs_histogram(bins=30, bar_margin=1)
mjs_plot(rnorm(10000)) %>%
mjs_histogram()
stocks2 <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
set.seed(1492)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
stocks2 <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
s1 <- stocks %>%
mjs_plot(x=time, y=X, linked=TRUE, width=350, height=275) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
s2 <- stocks2 %>%
mjs_plot(x=time, y=X, linked=TRUE, width=350, height=275) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
mjs_grid(s1, s2, ncol=2)
library(htmltools)
library(htmlwidgets)
library(metricsgraphics)
library(RColorBrewer)
mjs_grid(s1, s2, ncol=2)
stocks %>%
mjs_plot(x=time, y=X) %>%
mjs_line() %>%
mjs_add_line(Y) %>%
mjs_add_line(Z) %>%
mjs_axis_x(xax_format="date") %>%
mjs_add_legend(legend=c("X", "Y", "Z"))
install.packages("networkD3")
library(networkD3)
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
simpleNetwork(networkData)
data(MisLinks)
data(MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
library(RCurl)
URL <- "https://raw.githubusercontent.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- getURL(URL, ssl.verifypeer = FALSE)
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontsize = 12, nodeWidth = 30)
m <- 1000                # define size
C <- complex( real=rep(seq(-1.8,0.6, length.out=m), each=m ),
imag=rep(seq(-1.2,1.2, length.out=m), m ) )
dim(C)
length(C)
head(C)
1000**2
1e6
C <- matrix(C,m,m)       # reshape as square matrix of complex numbers
Z <- 0                   # initialize Z to zero
X <- array(0, c(m,m,20)) # initialize output 3D array
for (k in 1:20) {        # loop with 20 iterations
)))
rm(C)
rm(list=ls())
mandelbrot <- function(c) {
z <- 0
for (i in 1:20) {
z <- z**2 + c
}
if (z > 100) {
return(1)
} else {
return(0)
}
}
mandelbrot(1)
z <- 0
for (i in 1:20) {
z <- z**2 + c
print z
}
c <- 1
z <- 0
for (i in 1:20) {
z <- z**2 + c
print z
}
c <- 1
z <- 0
for (i in 1:20) {
z <- z**2 + c
z
}
print(1)
c <- 1
z <- 0
for (i in 1:20) {
z <- z**2 + c
print(z)
}
c <- 1
z <- 0
for (i in 1:10) {
z <- z**2 + c
print(z)
}
c <- 0.5
z <- 0
for (i in 1:10) {
z <- z**2 + c
print(z)
}
c <- -1
z <- 0
for (i in 1:10) {
z <- z**2 + c
print(z)
}
?complex
complex(real=1, complex=1)
complex(real=1, imaginary=1)
c <- complex(real=1, imaginary=1)
z <- 0
for (i in 1:10) {
z <- z**2 + c
print(z)
}
c <- complex(real=1, imaginary=1)
z <- 0
for (i in 1:8) {
z <- z**2 + c
print(z)
}
c <- complex(real=1, imaginary=1)
z <- 0
for (i in 1:8) {
z <- z**2 + c
print(abs(z))
}
?sapply
N <- 1000
vals <- complex( real=rep(seq(-1.8,0.6, length.out=m), each=m ),
imag=rep(seq(-1.2,1.2, length.out=m), m ) )
vals <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), each=N ) )
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) > 100) {
return(1)
} else {
return(0)
}
}
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
length(result)
length(results)
length(vals)
qplot(x=Re(vals), y = Im(vals), color = results)
library(ggplot2)
qplot(x=Re(vals), y = Im(vals), color = results)
plot(x=Re(vals), y = Im(vals), color = results)
plot(x=Re(vals)[results], y = Im(vals)[results])
warnings()
sum(results)
length(results)-sum(results)
plot(1:10)
plot(x=Re(vals)[results], y = Im(vals)[results], pch=20)
length(Re(vals)[results])
min(Re(vals)[results])
max(Re(vals)[results])
head(Re(vals))
tail(Re(vals))
head(Re(vals)[results])
tail(Re(vals)[results])
N <- 100
vals <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), each=N ) )
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
sum(results)
plot(x=Re(vals)[results], y = Im(vals)[results], pch=20)
hist(Re(vals)[results])
hist(Im(vals)[results])
Im(vals)[results]
Re(vals)[results]
vals
vals <- complex( real=seq(-1.8,0.6, length.out=N), imag=seq(-1.2,1.2, length.out=N))
temp <- expand.grid(seq(-1.8,0.6, length.out=N), seq(-1.2,1.2, length.out=N))
head(temp)
N <- 100
vals <- expand.grid(seq(-1.8,0.6, length.out=N), seq(-1.2,1.2, length.out=N))
vals <- complex(real=vals[,1], imag=vals[,2])
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
plot(x=Re(vals)[results], y = Im(vals)[results], pch=20)
Re(vals)[results]
Im(vals)[results]
head(vals[,1])
vals <- expand.grid(seq(-1.8,0.6, length.out=N), seq(-1.2,1.2, length.out=N))
head(vals[,1])
vals <- complex(real=vals[,1], imag=vals[,2])
unique(vals)
length(unique(vals))
N <- 100
vals <- expand.grid(seq(-1.8,0.6, length.out=N), seq(-1.2,1.2, length.out=N))
vals <- complex(real=vals[,1], imag=vals[,2])
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
plot(x=Re(vals)[results], y = Im(vals)[results], pch=20)
min(Re(vals)[results])
max(Re(vals)[results])
vals[results]
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20)
N <- 100
test <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), N ) )
sum(vals == test)
head(vals)
head(test)
length(unique(test))
tail(test)
N <- 100
vals <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), N ) )
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, size = 0.5)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, cex = 0.5)
warnings()
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, cex = 0.5)
N <- 1000
vals <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), N ) )
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, cex = 0.5)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, cex = 0.1)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, cex = 0.25)
N <- 5000
vals <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), N ) )
rm(list=ls())
N <- 5000
vals <- complex( real=rep(seq(-1.8,0.6, length.out=N), each=N ),
imag=rep(seq(-1.2,1.2, length.out=N), N ) )
mandelbrot <- function(c) {
z <- 0
for (i in 1:10) {
z <- z**2 + c
}
if (abs(z) < 100) {
return(1)
} else {
return(0)
}
}
results <- sapply(vals, mandelbrot)
plot(x=Re(vals)[results==1], y = Im(vals)[results==1], pch=20, cex = 0.25)
rm(list=ls())
library("sigma", lib="~")
library("sigma", lib=".")
library("sigma")
library("sigma", lib="~")
library(sigma)
sigma(system.file("examples/ediaspora.gexf.xml", package = "sigma"))
remove.packages(sigma)
remove.packages("sigma")
devtools::install_github('jjallaire/sigma')
library(sigma)
sigma(system.file("examples/ediaspora.gexf.xml", package = "sigma"))
library(svgPanZoom)
library(SVGAnnotation)
library(networkD3)
library(htmltools)
hc = hclust(dist(mtcars))
treeNetwork(
)
as.treeNetwork(hc, "mtcars")
treeNetwork(
as.treeNetwork(hc, "mtcars")
)
treeNetwork(
as.treeNetwork(hc, "mtcars")
)
tagList(
lapply(
c("tree.cartesian"
,"tree.radial"
,"cluster.cartesian"
,"cluster.radial"
)
,function(chartType){
hierNetwork( as.treeNetwork(hc), type = chartType, zoomable = T, collapsible = T )
}
)
)
tagList(
lapply(
c("tree.cartesian"
,"tree.radial"
,"cluster.cartesian"
,"cluster.radial"
)
,function(chartType){
hierNetwork( as.treeNetwork(hc), type = chartType, zoomable = T, collapsible = T )
}
)
)
hierNetwork( as.treeNetwork(hc), type = tree.cartesian, zoomable = T, collapsible = T )
hierNetwork( as.treeNetwork(hc), type = "tree.cartesian", zoomable = T, collapsible = T )
hierNetwork( as.treeNetwork(hc), type = "tree.radial", zoomable = T, collapsible = T )
hierNetwork( as.treeNetwork(hc), type = "cluster.cartesian", zoomable = T, collapsible = T )
hierNetwork( as.treeNetwork(hc), type = "cluster.radial", zoomable = T, collapsible = T )
treeNetwork(main$ToList(unname = TRUE))
setwd("~/Documents/UpdateDemo/Shiny")
library(networkD3)
library(dplyr)
library(stringr)
library(data.tree)
funds <- read.csv("./Data/sampleFundsData.csv",
colClasses = c("character", "character","numeric","character"))
df = funds %>% filter(indication == tolower("cancer")) %>% select(drug, center, amount)
df$amount = str_trim(sprintf("%7d",df$amount))
df <- split(df, as.factor(df$center))
for (i in 1:length(df)) {
df[[i]]$center <- NULL
df[[i]] <- split(df[[i]], as.factor(df[[i]]$drug))
for (j in 1:length(df[[i]])) {
df[[i]][[j]]$drug <- NULL
df[[i]][[j]] <- df[[i]][[j]]$amount
}
}
main <- Node$new("Cancer")
for (i in 1:length(df)) {
current <- main$AddChild(names(df)[i])
for (j in 1:length(df[[i]])) {
sub_current <- current$AddChild(names(df[[i]])[j])
for (k in 1:length(df[[i]][[j]])) {
sub_current$AddChild(df[[i]][[j]][[k]])
}
}
}
treeNetwork(main$ToList(unname = TRUE))
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = T, collapsible = T )
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = F, collapsible = T )
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = T, collapsible = T )
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE )
shiny::runApp()
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE )
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE, height = 200, width = 200)
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE, height = 600, width = 600)
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE, height = 600, width = 1200)
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE)
shiny::runApp()
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE )
hierNetwork( as.treeNetwork(hc), type = "tree.cartesian", zoomable = T, collapsible = T )
hierNetwork( as.treeNetwork(hc), type = "cluster.cartesian", zoomable = T, collapsible = T )
hierNetwork(main$ToList(unname = TRUE), type = "cluster.cartesian", zoomable = TRUE, collapsible = TRUE )
shiny::runApp()
shiny::runApp()
hierNetwork( as.treeNetwork(hc), type = "tree.cartesian", zoomable = T, collapsible = T )
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyapps)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("timelyportfolio/katexR")
library(katexR)
katex("x+1\\over\\sqrt{1-x^2}")
katex("P(E) = {n \\choose k} p^k (1-p)^{ n-k}")
hierNetwork(main$ToList(unname = TRUE), type = "tree.cartesian", zoomable = TRUE, collapsible = TRUE )
